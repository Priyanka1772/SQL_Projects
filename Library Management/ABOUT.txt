📚 Library Management System (SQL Project)
* This repository contains the SQL scripts for a basic Library Management System database. 
* The project demonstrates fundamental SQL concepts including database creation, table design with relationships, CRUD (Create, Read, Update, Delete) operations, and various queries for data retrieval and analysis.

✨ Features
* Database Schema: Designed with Authors, Books, Members, and Loans tables.
* CRUD Operations: Examples for inserting, selecting, updating, and deleting records in each table.
* Relationship Management: Utilizes PRIMARY KEY and FOREIGN KEY constraints to maintain data integrity.
* Specific Queries: Includes queries to track borrowed books, identify overdue books, and search for books by author.

🛠️ Technologies Used
* MySQL: Relational Database Management System.
* MySQL Workbench: Used for database interaction and query execution.

🚀 Getting Started
* Follow these steps to set up and run the project on your local machine using MySQL Workbench.
* Prerequisites
  * MySQL Server installed.
  * MySQL Workbench installed.
* Setup Instructions
  * Clone the Repository.
  * Open MySQL Workbench.
  * Connect to your MySQL server instance.
  * Create the Database.
  * Create Tables.
  * Insert Sample Data.
 
📊 Database Schema
* The database consists of four main tables.
* Authors: Stores information about book authors.[Author_ID (PK), Author_Name]
* Books: Stores details about the books available in the library. [Book_ID (PK), Title, Author_ID, Publication_Year, isbn, Available_Copies]
* Members: Stores information about library members. [Member_ID (PK), Member_Name, Address, Contact]
* Loans: Records book borrowing transactions. [Loan_ID (PK), Book_ID, Member_ID, Loan_Date, Return_date]

🔍 Key Queries
* Here are some important queries demonstrated in this project that showcase core functionalities:
* Currently Borrowed Books: Lists all books that are currently out on loan, along with the borrower and loan date.
  SELECT B.title AS BookTitle, A.author_name AS Author, M.member_name AS BorrowedBy, L.loan_date AS LoanDate
  FROM Loans AS L
  INNER JOIN Books AS B ON L.book_id = B.book_id
  INNER JOIN Authors AS A ON B.author_id = A.author_id
  INNER JOIN Members AS M ON L.member_id = M.member_id
  WHERE L.return_date IS NULL;
* Overdue Books: Identifies books that are currently overdue (assuming a 14-day loan period).
  SELECT B.title AS BookTitle, A.author_name AS Author, M.member_name AS BorrowedBy, L.loan_date AS LoanDate, DATEDIFF(CURDATE(), L.loan_date) AS DaysOverdue
  FROM Loans AS L
  INNER JOIN Books AS B ON L.book_id = B.book_id
  INNER JOIN Authors AS A ON B.author_id = A.author_id
  INNER JOIN Members AS M ON L.member_id = M.member_id
  WHERE L.return_date IS NULL AND DATEDIFF(CURDATE(), L.loan_date) > 14;
* Books by a Specific Author: Finds all books written by a particular author.
  SELECT B.title AS BookTitle, B.publication_year, B.isbn, B.available_copies
  FROM Books AS B
  INNER JOIN Authors AS A ON B.author_id = A.author_id
  WHERE A.author_name = 'George Orwell'; -- Change author name as needed

## Contributing
* Feel free to fork this repository, make improvements, or add new features! Pull requests are welcome.

## License
* This project is open-sourced under the MIT License.

## Author
* www.linkedin.com/in/priyanka-s-kumar-1580b0218
